{"version":3,"sources":["illustrations/sierpinski-triangle/controller.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","models/canvas.ts"],"names":["SierpinskiTriangleController","canvasElement","canvas","a","x","y","b","c","next","this","Canvas","drawFilledRect","width","height","drawFilledCircle","points","randomIndex","Math","floor","random","newX","newY","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","canvasContext","drawBitmap","bind","drawOutlineRect","drawLine","writeText","getContext","reset","getBoundingClientRect","setTransform","useBitmap","angle","save","translate","rotate","drawImage","restore","color","fillStyle","fillRect","strokeStyle","strokeRect","radius","beginPath","moveTo","arcTo","stroke","x1","y1","x2","y2","lineWidth","lineTo","dashParams","setLineDash","centerX","centerY","arc","PI","fill","text","fontSize","fillText"],"mappings":"uNAOqBA,E,WAQnB,WAAYC,GAAmC,yBAP/CC,YAO8C,OAN9CC,EAAW,CAAEC,EAAG,IAAKC,EAAG,IAMsB,KAL9CC,EAAW,CAAEF,EAAG,IAAKC,EAAG,KAKsB,KAJ9CE,EAAW,CAAEH,EAAG,IAAKC,EAAG,KAIsB,KAF9CG,KAAc,CAAEJ,EAAGK,KAAKN,EAAEC,EAAGC,EAAGI,KAAKN,EAAEE,GAGrCI,KAAKP,OAAS,IAAIQ,IAAOT,GAEzBQ,KAAKP,OAAOS,eACV,EACA,EACAF,KAAKP,OAAOU,MACZH,KAAKP,OAAOW,OACZ,SAKFJ,KAAKP,OAAOY,iBAAiBL,KAAKN,EAAEC,EAAGK,KAAKN,EAAEE,EAAG,EADtB,OAE3BI,KAAKP,OAAOY,iBAAiBL,KAAKH,EAAEF,EAAGK,KAAKH,EAAED,EAAG,EAFtB,OAG3BI,KAAKP,OAAOY,iBAAiBL,KAAKF,EAAEH,EAAGK,KAAKF,EAAEF,EAAG,EAHtB,O,mDAO3BI,KAAKP,OAAOY,iBAAiBL,KAAKD,KAAKJ,EAAGK,KAAKD,KAAKH,EAAG,EAAG,W,+BAI1D,IAAMU,EAAS,CAACN,KAAKN,EAAGM,KAAKH,EAAGG,KAAKF,GAC/BS,EAAcC,KAAKC,MAAsB,EAAhBD,KAAKE,UAE9BC,GAAQL,EAAOC,GAAaZ,EAAIK,KAAKD,KAAKJ,GAAK,EAC/CiB,GAAQN,EAAOC,GAAaX,EAAII,KAAKD,KAAKH,GAAK,EAErDI,KAAKD,KAAKJ,EAAIgB,EACdX,KAAKD,KAAKH,EAAIgB,M,sCC7CH,SAASC,EAAgBC,EAAUC,GAChD,KAAMD,aAAoBC,GACxB,MAAM,IAAIC,UAAU,qCAFxB,mC,gCCAA,SAASC,EAAkBC,EAAQC,GACjC,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CACrC,IAAIE,EAAaH,EAAMC,GACvBE,EAAWC,WAAaD,EAAWC,aAAc,EACjDD,EAAWE,cAAe,EACtB,UAAWF,IAAYA,EAAWG,UAAW,GACjDC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,IAInC,SAASO,EAAad,EAAae,EAAYC,GAG5D,OAFID,GAAYb,EAAkBF,EAAYiB,UAAWF,GACrDC,GAAad,EAAkBF,EAAagB,GACzChB,EAbT,mC,sFCAqBd,E,WAgBjB,WAAYR,GAA4B,yBAfhCA,YAe+B,OAd/BwC,mBAc+B,EACnCjC,KAAKkC,WAAalC,KAAKkC,WAAWC,KAAKnC,MACvCA,KAAKE,eAAiBF,KAAKE,eAAeiC,KAAKnC,MAC/CA,KAAKoC,gBAAkBpC,KAAKoC,gBAAgBD,KAAKnC,MACjDA,KAAKqC,SAAWrC,KAAKqC,SAASF,KAAKnC,MACnCA,KAAKK,iBAAmBL,KAAKK,iBAAiB8B,KAAKnC,MACnDA,KAAKkC,WAAalC,KAAKkC,WAAWC,KAAKnC,MACvCA,KAAKsC,UAAYtC,KAAKsC,UAAUH,KAAKnC,MAErCA,KAAKP,OAASA,EACdO,KAAKiC,cACDjC,KAAKP,OAAO8C,WAAW,MAC3BvC,KAAKwC,Q,kEAvBL,OAAOxC,KAAKP,OAAOgD,0B,4BAInB,OAAOzC,KAAKP,OAAOU,Q,6BAInB,OAAOH,KAAKP,OAAOW,W,6CAmBnBJ,KAAKiC,cAAcS,aAAa,EAAG,EAAG,EAAG,EAAG,EAAG,K,iCAGxCC,EAA8BhD,EAAWC,EAAWgD,GAC3D5C,KAAKiC,cAAcY,OACnB7C,KAAKiC,cAAca,UAAUnD,EAAGC,GAChCI,KAAKiC,cAAcc,OAAOH,GAC1B5C,KAAKiC,cAAce,UAAUL,GAAYA,EAAUxC,MAAQ,GAAIwC,EAAUvC,OAAS,GAClFJ,KAAKiC,cAAcgB,Y,qCAGRtD,EAAWC,EAAWO,EAAeC,EAAgB8C,GAChElD,KAAKiC,cAAckB,UAAYD,EAC/BlD,KAAKiC,cAAcmB,SAASzD,EAAGC,EAAGO,EAAOC,K,sCAG7BT,EAAWC,EAAWO,EAAeC,EAAgB8C,GACjElD,KAAKiC,cAAcoB,YAAcH,EACjClD,KAAKiC,cAAcqB,WAAW3D,EAAGC,EAAGO,EAAOC,K,sCAI3CT,EAAWC,EAAWO,EAAeC,EAAgBmD,EAAgBL,GAErElD,KAAKiC,cAAcuB,YACnBxD,KAAKiC,cAAcoB,YAAcH,EACjClD,KAAKiC,cAAcwB,OAAO9D,EAAIQ,EAAQoD,EAAQ3D,EAAIQ,GAClDJ,KAAKiC,cAAcyB,MAAM/D,EAAGC,EAAIQ,EAAQT,EAAGC,EAAG2D,GAC9CvD,KAAKiC,cAAcyB,MAAM/D,EAAGC,EAAGD,EAAIQ,EAAOP,EAAG2D,GAC7CvD,KAAKiC,cAAcyB,MAAM/D,EAAIQ,EAAOP,EAAGD,EAAIQ,EAAOP,EAAIQ,EAAQmD,GAC9DvD,KAAKiC,cAAcyB,MAAM/D,EAAIQ,EAAOP,EAAIQ,EAAQT,EAAGC,EAAIQ,EAAQmD,GAC/DvD,KAAKiC,cAAc0B,W,+BAGdC,EAAYC,EAAYC,EAAYC,EAAYC,EAAmBd,GACxElD,KAAKiC,cAAcY,OACnB7C,KAAKiC,cAAcuB,YACnBxD,KAAKiC,cAAc+B,UAAYA,EAC/BhE,KAAKiC,cAAcoB,YAAcH,EACjClD,KAAKiC,cAAcwB,OAAOG,EAAIC,GAC9B7D,KAAKiC,cAAcgC,OAAOH,EAAIC,GAC9B/D,KAAKiC,cAAc0B,SACnB3D,KAAKiC,cAAcgB,Y,qCAGRW,EAAYC,EAAYC,EAAYC,EAAYC,EAAmBd,EAAegB,GAC7FlE,KAAKiC,cAAckC,YAAYD,GAC/BlE,KAAKqC,SAASuB,EAAIC,EAAIC,EAAIC,EAAIC,EAAWd,GACzClD,KAAKiC,cAAckC,YAAY,M,uCAGlBC,EAAiBC,EAAiBd,EAAgBL,GAC/DlD,KAAKiC,cAAcuB,YACnBxD,KAAKiC,cAAckB,UAAYD,EAC/BlD,KAAKiC,cAAcqC,IAAIF,EAASC,EAASd,EAAQ,EAAG,EAAI/C,KAAK+D,IAAI,GACjEvE,KAAKiC,cAAcuC,S,gCAGbC,EAAc9E,EAAWC,EAAW8E,EAAkBxB,GAC5DlD,KAAKiC,cAAckB,UAAYD,EAC/BlD,KAAKiC,cAAc0C,SAASF,EAAM9E,EAAGC,K,gCAG/BD,EAAWC,GACjBI,KAAKiC,cAAca,UAAUnD,EAAGC,K,6BAG7BgD,GACH5C,KAAKiC,cAAcc,OAAOH,K,kCAI1B5C,KAAKiC,cAAcY,S,iCAInB7C,KAAKiC,cAAcgB,c","file":"static/js/29.5ad4e0f3.chunk.js","sourcesContent":["import Canvas from \"src/models/canvas\";\n\ninterface Point {\n  x: number;\n  y: number;\n}\n\nexport default class SierpinskiTriangleController {\n  canvas: Canvas;\n  a: Point = { x: 250, y: 50 };\n  b: Point = { x: 100, y: 250 };\n  c: Point = { x: 400, y: 250 };\n\n  next: Point = { x: this.a.x, y: this.a.y };\n\n  constructor(canvasElement: HTMLCanvasElement) {\n    this.canvas = new Canvas(canvasElement);\n    // Draw background\n    this.canvas.drawFilledRect(\n      0,\n      0,\n      this.canvas.width,\n      this.canvas.height,\n      \"black\"\n    );\n\n    // Initial points\n    const initialPointsColor = \"red\";\n    this.canvas.drawFilledCircle(this.a.x, this.a.y, 2, initialPointsColor);\n    this.canvas.drawFilledCircle(this.b.x, this.b.y, 2, initialPointsColor);\n    this.canvas.drawFilledCircle(this.c.x, this.c.y, 2, initialPointsColor);\n  }\n\n  plot() {\n    this.canvas.drawFilledCircle(this.next.x, this.next.y, 1, \"white\");\n  }\n\n  update() {\n    const points = [this.a, this.b, this.c];\n    const randomIndex = Math.floor(Math.random() * 3);\n\n    const newX = (points[randomIndex].x + this.next.x) / 2;\n    const newY = (points[randomIndex].y + this.next.y) / 2;\n\n    this.next.x = newX;\n    this.next.y = newY;\n  }\n}\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","export default class Canvas {\n    private canvas: HTMLCanvasElement;\n    private canvasContext: CanvasRenderingContext2D;\n\n    get getBoundingClientRect() {\n        return this.canvas.getBoundingClientRect();\n    }\n\n    get width(): number {\n        return this.canvas.width;\n    }\n\n    get height(): number {\n        return this.canvas.height;\n    }\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.drawBitmap = this.drawBitmap.bind(this);\n        this.drawFilledRect = this.drawFilledRect.bind(this);\n        this.drawOutlineRect = this.drawOutlineRect.bind(this);\n        this.drawLine = this.drawLine.bind(this);\n        this.drawFilledCircle = this.drawFilledCircle.bind(this);\n        this.drawBitmap = this.drawBitmap.bind(this);\n        this.writeText = this.writeText.bind(this);\n\n        this.canvas = canvas;\n        this.canvasContext =\n            this.canvas.getContext('2d') as CanvasRenderingContext2D;\n        this.reset();\n    }\n\n    reset() {\n        this.canvasContext.setTransform(1, 0, 0, 1, 0, 0);\n    }\n\n    drawBitmap(useBitmap: CanvasImageSource, x: number, y: number, angle: number) {\n        this.canvasContext.save();\n        this.canvasContext.translate(x, y);\n        this.canvasContext.rotate(angle);\n        this.canvasContext.drawImage(useBitmap, -useBitmap.width / 2, -useBitmap.height / 2);\n        this.canvasContext.restore();\n    }\n\n    drawFilledRect(x: number, y: number, width: number, height: number, color: string) {\n        this.canvasContext.fillStyle = color;\n        this.canvasContext.fillRect(x, y, width, height);\n    }\n\n    drawOutlineRect(x: number, y: number, width: number, height: number, color: string) {\n        this.canvasContext.strokeStyle = color;\n        this.canvasContext.strokeRect(x, y, width, height);\n    }\n\n    drawRoundedRect(\n        x: number, y: number, width: number, height: number, radius: number, color: string\n    ) {\n        this.canvasContext.beginPath();\n        this.canvasContext.strokeStyle = color;\n        this.canvasContext.moveTo(x + width - radius, y + height);\n        this.canvasContext.arcTo(x, y + height, x, y, radius);\n        this.canvasContext.arcTo(x, y, x + width, y, radius);\n        this.canvasContext.arcTo(x + width, y, x + width, y + height, radius);\n        this.canvasContext.arcTo(x + width, y + height, x, y + height, radius);\n        this.canvasContext.stroke();\n    }\n\n    drawLine(x1: number, y1: number, x2: number, y2: number, lineWidth: number, color: string) {\n        this.canvasContext.save();\n        this.canvasContext.beginPath();\n        this.canvasContext.lineWidth = lineWidth;\n        this.canvasContext.strokeStyle = color;\n        this.canvasContext.moveTo(x1, y1);\n        this.canvasContext.lineTo(x2, y2);\n        this.canvasContext.stroke();\n        this.canvasContext.restore();\n    }\n\n    drawDashedLine(x1: number, y1: number, x2: number, y2: number, lineWidth: number, color: string, dashParams: number[]) {\n        this.canvasContext.setLineDash(dashParams);\n        this.drawLine(x1, y1, x2, y2, lineWidth, color);\n        this.canvasContext.setLineDash([]);\n    }\n\n    drawFilledCircle(centerX: number, centerY: number, radius: number, color: string) {\n        this.canvasContext.beginPath();\n        this.canvasContext.fillStyle = color;\n        this.canvasContext.arc(centerX, centerY, radius, 0, 2 * Math.PI, true);\n        this.canvasContext.fill();\n    }\n\n    writeText(text: string, x: number, y: number, fontSize: number, color: string) {\n        this.canvasContext.fillStyle = color;\n        this.canvasContext.fillText(text, x, y);\n    }\n\n    translate(x: number, y: number) {\n        this.canvasContext.translate(x, y);\n    }\n\n    rotate(angle: number) {\n        this.canvasContext.rotate(angle);\n    }\n\n    pushState() {\n        this.canvasContext.save();\n    }\n\n    popState() {\n        this.canvasContext.restore();\n    }\n}\n\n\n// Mouse handler\n// let mouseX, mouseY;\n// canvas-container.addEventListener('mousemove', function (event) {\n//         let rect = canvas-container.getBoundingClientRect();\n//         let root = document.documentElement;\n\n//         mouseX = event.clientX - rect.left - root.scrollLeft;\n//         mouseY = event.clientY - rect.top - root.scrollTop;\n//     });\n"],"sourceRoot":""}