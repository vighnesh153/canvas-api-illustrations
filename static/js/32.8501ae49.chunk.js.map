{"version":3,"sources":["illustrations/symmetric-binary-tree/controller.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","models/canvas.ts"],"names":["SymmetricBinaryTreeController","canvasElement","angle","lengthScaleDownFactor","initialBranchLength","canvas","lineWidth","branchLengthScaleDownFactor","this","Canvas","drawFilledRect","width","height","translate","draw","length","drawLine","pushState","rotate","popState","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","canvasContext","drawBitmap","bind","drawOutlineRect","drawFilledCircle","writeText","getContext","reset","getBoundingClientRect","setTransform","useBitmap","x","y","save","drawImage","restore","color","fillStyle","fillRect","strokeStyle","strokeRect","radius","beginPath","moveTo","arcTo","stroke","x1","y1","x2","y2","lineTo","dashParams","setLineDash","centerX","centerY","arc","Math","PI","fill","text","fontSize","fillText"],"mappings":"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","file":"static/js/32.8501ae49.chunk.js","sourcesContent":["import Canvas from \"src/models/canvas\";\n\nexport default class SymmetricBinaryTreeController {\n  canvas: Canvas;\n\n  lineWidth = 2;\n\n  angle: number;\n  branchLengthScaleDownFactor: number;\n  initialBranchLength: number;\n\n  constructor(\n    canvasElement: HTMLCanvasElement,\n    angle: number,\n    lengthScaleDownFactor: number,\n    initialBranchLength: number\n  ) {\n    this.canvas = new Canvas(canvasElement);\n    // Draw background\n    this.canvas.drawFilledRect(\n      0,\n      0,\n      this.canvas.width,\n      this.canvas.height,\n      \"black\"\n    );\n    this.angle = angle;\n    this.branchLengthScaleDownFactor = lengthScaleDownFactor;\n    this.initialBranchLength = initialBranchLength;\n  }\n\n  plot() {\n    this.canvas.translate(this.canvas.width / 2, this.canvas.height - 2);\n    this.draw(this.initialBranchLength);\n  }\n\n  draw(length: number) {\n    this.canvas.drawLine(0, 0, 0, -length, this.lineWidth, \"white\");\n    this.canvas.translate(0, -length);\n\n    if (length < 4) {\n      return;\n    }\n\n    this.canvas.pushState();\n    this.canvas.rotate(this.angle);\n    this.draw(length * this.branchLengthScaleDownFactor);\n    this.canvas.popState();\n\n    this.canvas.pushState();\n    this.canvas.rotate(-this.angle);\n    this.draw(length * this.branchLengthScaleDownFactor);\n    this.canvas.popState();\n  }\n}\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","export default class Canvas {\n    private canvas: HTMLCanvasElement;\n    private canvasContext: CanvasRenderingContext2D;\n\n    get getBoundingClientRect() {\n        return this.canvas.getBoundingClientRect();\n    }\n\n    get width(): number {\n        return this.canvas.width;\n    }\n\n    get height(): number {\n        return this.canvas.height;\n    }\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.drawBitmap = this.drawBitmap.bind(this);\n        this.drawFilledRect = this.drawFilledRect.bind(this);\n        this.drawOutlineRect = this.drawOutlineRect.bind(this);\n        this.drawLine = this.drawLine.bind(this);\n        this.drawFilledCircle = this.drawFilledCircle.bind(this);\n        this.drawBitmap = this.drawBitmap.bind(this);\n        this.writeText = this.writeText.bind(this);\n\n        this.canvas = canvas;\n        this.canvasContext =\n            this.canvas.getContext('2d') as CanvasRenderingContext2D;\n        this.reset();\n    }\n\n    reset() {\n        this.canvasContext.setTransform(1, 0, 0, 1, 0, 0);\n    }\n\n    drawBitmap(useBitmap: CanvasImageSource, x: number, y: number, angle: number) {\n        this.canvasContext.save();\n        this.canvasContext.translate(x, y);\n        this.canvasContext.rotate(angle);\n        this.canvasContext.drawImage(useBitmap, -useBitmap.width / 2, -useBitmap.height / 2);\n        this.canvasContext.restore();\n    }\n\n    drawFilledRect(x: number, y: number, width: number, height: number, color: string) {\n        this.canvasContext.fillStyle = color;\n        this.canvasContext.fillRect(x, y, width, height);\n    }\n\n    drawOutlineRect(x: number, y: number, width: number, height: number, color: string) {\n        this.canvasContext.strokeStyle = color;\n        this.canvasContext.strokeRect(x, y, width, height);\n    }\n\n    drawRoundedRect(\n        x: number, y: number, width: number, height: number, radius: number, color: string\n    ) {\n        this.canvasContext.beginPath();\n        this.canvasContext.strokeStyle = color;\n        this.canvasContext.moveTo(x + width - radius, y + height);\n        this.canvasContext.arcTo(x, y + height, x, y, radius);\n        this.canvasContext.arcTo(x, y, x + width, y, radius);\n        this.canvasContext.arcTo(x + width, y, x + width, y + height, radius);\n        this.canvasContext.arcTo(x + width, y + height, x, y + height, radius);\n        this.canvasContext.stroke();\n    }\n\n    drawLine(x1: number, y1: number, x2: number, y2: number, lineWidth: number, color: string) {\n        this.canvasContext.save();\n        this.canvasContext.beginPath();\n        this.canvasContext.lineWidth = lineWidth;\n        this.canvasContext.strokeStyle = color;\n        this.canvasContext.moveTo(x1, y1);\n        this.canvasContext.lineTo(x2, y2);\n        this.canvasContext.stroke();\n        this.canvasContext.restore();\n    }\n\n    drawDashedLine(x1: number, y1: number, x2: number, y2: number, lineWidth: number, color: string, dashParams: number[]) {\n        this.canvasContext.setLineDash(dashParams);\n        this.drawLine(x1, y1, x2, y2, lineWidth, color);\n        this.canvasContext.setLineDash([]);\n    }\n\n    drawFilledCircle(centerX: number, centerY: number, radius: number, color: string) {\n        this.canvasContext.beginPath();\n        this.canvasContext.fillStyle = color;\n        this.canvasContext.arc(centerX, centerY, radius, 0, 2 * Math.PI, true);\n        this.canvasContext.fill();\n    }\n\n    writeText(text: string, x: number, y: number, fontSize: number, color: string) {\n        this.canvasContext.fillStyle = color;\n        this.canvasContext.fillText(text, x, y);\n    }\n\n    translate(x: number, y: number) {\n        this.canvasContext.translate(x, y);\n    }\n\n    rotate(angle: number) {\n        this.canvasContext.rotate(angle);\n    }\n\n    pushState() {\n        this.canvasContext.save();\n    }\n\n    popState() {\n        this.canvasContext.restore();\n    }\n}\n\n\n// Mouse handler\n// let mouseX, mouseY;\n// canvas-container.addEventListener('mousemove', function (event) {\n//         let rect = canvas-container.getBoundingClientRect();\n//         let root = document.documentElement;\n\n//         mouseX = event.clientX - rect.left - root.scrollLeft;\n//         mouseY = event.clientY - rect.top - root.scrollTop;\n//     });\n"],"sourceRoot":""}