{"version":3,"sources":["illustrations/barnsleys-fern/fern.ts","illustrations/barnsleys-fern/fern-controller.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","models/canvas.ts"],"names":["Fern","x","y","nextX","nextY","r","Math","random","this","FernController","canvasElement","fern","canvas","Canvas","drawFilledRect","width","height","X","Y","plotX","plotY","drawFilledCircle","generateNext","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","canvasContext","drawBitmap","bind","drawOutlineRect","drawLine","writeText","getContext","reset","getBoundingClientRect","setTransform","useBitmap","angle","save","translate","rotate","drawImage","restore","color","fillStyle","fillRect","strokeStyle","strokeRect","radius","beginPath","moveTo","arcTo","stroke","x1","y1","x2","y2","lineWidth","lineTo","dashParams","setLineDash","centerX","centerY","arc","PI","fill","text","fontSize","fillText"],"mappings":"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","file":"static/js/16.8b0d0260.chunk.js","sourcesContent":["export default class Fern {\n  private x = 0;\n  private y = 0;\n\n  get X(): number {\n    return this.x;\n  }\n\n  get Y(): number {\n    return this.y;\n  }\n\n  generateNext() {\n    const r = Math.random();\n    let nextX;\n    let nextY;\n\n    if (r < 0.01) {\n      nextX = 0;\n      nextY = 0.16 * this.y;\n    } else if (r < 0.86) {\n      nextX = 0.85 * this.x + 0.04 * this.y;\n      nextY = -0.04 * this.x + 0.85 * this.y + 1.6;\n    } else if (r < 0.93) {\n      nextX = 0.2 * this.x - 0.26 * this.y;\n      nextY = 0.23 * this.x + 0.22 * this.y + 1.6;\n    } else {\n      nextX = -0.15 * this.x + 0.28 * this.y;\n      nextY = 0.26 * this.x + 0.24 * this.y + 0.44;\n    }\n\n    this.x = nextX;\n    this.y = nextY;\n  }\n}\n","import Fern from \"./fern\";\nimport Canvas from \"src/models/canvas\";\n\nexport default class FernController {\n  fern = new Fern();\n  canvas: Canvas;\n\n  constructor(canvasElement: HTMLCanvasElement) {\n    this.canvas = new Canvas(canvasElement);\n    // Draw background\n    this.canvas.drawFilledRect(\n      0,\n      0,\n      this.canvas.width,\n      this.canvas.height,\n      \"white\"\n    );\n  }\n\n  plot() {\n    const { X, Y } = this.fern;\n\n    // transform and scale\n    const plotX = (this.canvas.width * X) / 6 + 250;\n    const plotY = (this.canvas.height - 20) * (1 - Y / 10) + 10;\n\n    this.canvas.drawFilledCircle(plotX, plotY, 1, \"green\");\n  }\n\n  update() {\n    this.fern.generateNext();\n  }\n}\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","export default class Canvas {\n    private canvas: HTMLCanvasElement;\n    private canvasContext: CanvasRenderingContext2D;\n\n    get getBoundingClientRect() {\n        return this.canvas.getBoundingClientRect();\n    }\n\n    get width(): number {\n        return this.canvas.width;\n    }\n\n    get height(): number {\n        return this.canvas.height;\n    }\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.drawBitmap = this.drawBitmap.bind(this);\n        this.drawFilledRect = this.drawFilledRect.bind(this);\n        this.drawOutlineRect = this.drawOutlineRect.bind(this);\n        this.drawLine = this.drawLine.bind(this);\n        this.drawFilledCircle = this.drawFilledCircle.bind(this);\n        this.drawBitmap = this.drawBitmap.bind(this);\n        this.writeText = this.writeText.bind(this);\n\n        this.canvas = canvas;\n        this.canvasContext =\n            this.canvas.getContext('2d') as CanvasRenderingContext2D;\n        this.reset();\n    }\n\n    reset() {\n        this.canvasContext.setTransform(1, 0, 0, 1, 0, 0);\n    }\n\n    drawBitmap(useBitmap: CanvasImageSource, x: number, y: number, angle: number) {\n        this.canvasContext.save();\n        this.canvasContext.translate(x, y);\n        this.canvasContext.rotate(angle);\n        this.canvasContext.drawImage(useBitmap, -useBitmap.width / 2, -useBitmap.height / 2);\n        this.canvasContext.restore();\n    }\n\n    drawFilledRect(x: number, y: number, width: number, height: number, color: string) {\n        this.canvasContext.fillStyle = color;\n        this.canvasContext.fillRect(x, y, width, height);\n    }\n\n    drawOutlineRect(x: number, y: number, width: number, height: number, color: string) {\n        this.canvasContext.strokeStyle = color;\n        this.canvasContext.strokeRect(x, y, width, height);\n    }\n\n    drawRoundedRect(\n        x: number, y: number, width: number, height: number, radius: number, color: string\n    ) {\n        this.canvasContext.beginPath();\n        this.canvasContext.strokeStyle = color;\n        this.canvasContext.moveTo(x + width - radius, y + height);\n        this.canvasContext.arcTo(x, y + height, x, y, radius);\n        this.canvasContext.arcTo(x, y, x + width, y, radius);\n        this.canvasContext.arcTo(x + width, y, x + width, y + height, radius);\n        this.canvasContext.arcTo(x + width, y + height, x, y + height, radius);\n        this.canvasContext.stroke();\n    }\n\n    drawLine(x1: number, y1: number, x2: number, y2: number, lineWidth: number, color: string) {\n        this.canvasContext.save();\n        this.canvasContext.beginPath();\n        this.canvasContext.lineWidth = lineWidth;\n        this.canvasContext.strokeStyle = color;\n        this.canvasContext.moveTo(x1, y1);\n        this.canvasContext.lineTo(x2, y2);\n        this.canvasContext.stroke();\n        this.canvasContext.restore();\n    }\n\n    drawDashedLine(x1: number, y1: number, x2: number, y2: number, lineWidth: number, color: string, dashParams: number[]) {\n        this.canvasContext.setLineDash(dashParams);\n        this.drawLine(x1, y1, x2, y2, lineWidth, color);\n        this.canvasContext.setLineDash([]);\n    }\n\n    drawFilledCircle(centerX: number, centerY: number, radius: number, color: string) {\n        this.canvasContext.beginPath();\n        this.canvasContext.fillStyle = color;\n        this.canvasContext.arc(centerX, centerY, radius, 0, 2 * Math.PI, true);\n        this.canvasContext.fill();\n    }\n\n    writeText(text: string, x: number, y: number, fontSize: number, color: string) {\n        this.canvasContext.fillStyle = color;\n        this.canvasContext.fillText(text, x, y);\n    }\n\n    translate(x: number, y: number) {\n        this.canvasContext.translate(x, y);\n    }\n\n    rotate(angle: number) {\n        this.canvasContext.rotate(angle);\n    }\n\n    pushState() {\n        this.canvasContext.save();\n    }\n\n    popState() {\n        this.canvasContext.restore();\n    }\n}\n\n\n// Mouse handler\n// let mouseX, mouseY;\n// canvas-container.addEventListener('mousemove', function (event) {\n//         let rect = canvas-container.getBoundingClientRect();\n//         let root = document.documentElement;\n\n//         mouseX = event.clientX - rect.left - root.scrollLeft;\n//         mouseY = event.clientY - rect.top - root.scrollTop;\n//     });\n"],"sourceRoot":""}