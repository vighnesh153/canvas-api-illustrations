{"version":3,"sources":["illustrations/grid-path-finding/component.tsx"],"names":["Component","props","canvasRef","setDataAttributes","component","GridPathFindingVisualizerController","current","dataAttributes","buttons","text","clickHandler","generateRandomStartAndEnd","generateRandomWalls","resetGrid","startAnimation","stopAnimation","useEffect"],"mappings":"4IAAA,mCA6DeA,UApDf,SAAmBC,GAAmB,IAC5BC,EAAiCD,EAAjCC,UAAWC,EAAsBF,EAAtBE,kBAEbC,EAAY,IAAIC,sCACpBH,EAAUI,SAGNC,EAAiC,CACrCC,QAAS,CACP,CACEC,KAAM,uBACNC,aAAc,WACZN,EAAUO,8BAGd,CACEF,KAAM,eACNC,aAAc,WACZN,EAAUQ,wBAGd,CACEH,KAAM,aACNC,aAAc,WACZN,EAAUS,cAGd,CACEJ,KAAM,QACNC,aAAc,WACZN,EAAUU,mBAGd,CACEL,KAAM,OACNC,aAAc,WACZN,EAAUW,oBAalB,OAPAC,qBAAU,WAER,OADAb,EAAkBI,GACX,WACLH,EAAUW,mBAEX,CAACZ,EAAmBI,EAAgBH,IAEhC","file":"static/js/34.53a8a6a9.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport DataAttributes from \"src/models/data-attributes\";\nimport { GridPathFindingVisualizerController } from \"src/illustrations/grid-path-finding/controller\";\n\ntype PropsType = {\n  canvasRef: React.RefObject<HTMLCanvasElement>;\n  setDataAttributes: (v: DataAttributes) => void;\n};\n\nfunction Component(props: PropsType) {\n  const { canvasRef, setDataAttributes } = props;\n\n  const component = new GridPathFindingVisualizerController(\n    canvasRef.current as HTMLCanvasElement\n  );\n\n  const dataAttributes: DataAttributes = {\n    buttons: [\n      {\n        text: \"Random Start and End\",\n        clickHandler: () => {\n          component.generateRandomStartAndEnd();\n        },\n      },\n      {\n        text: \"Random Walls\",\n        clickHandler: () => {\n          component.generateRandomWalls();\n        },\n      },\n      {\n        text: \"Reset Grid\",\n        clickHandler: () => {\n          component.resetGrid();\n        },\n      },\n      {\n        text: \"START\",\n        clickHandler: () => {\n          component.startAnimation();\n        },\n      },\n      {\n        text: \"STOP\",\n        clickHandler: () => {\n          component.stopAnimation();\n        },\n      },\n    ],\n  };\n\n  useEffect(() => {\n    setDataAttributes(dataAttributes);\n    return () => {\n      component.stopAnimation();\n    };\n  }, [setDataAttributes, dataAttributes, component]);\n\n  return <></>;\n}\n\nexport default Component;\n"],"sourceRoot":""}