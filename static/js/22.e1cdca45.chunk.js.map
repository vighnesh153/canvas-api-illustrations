{"version":3,"sources":["illustrations/snake-game/controller.ts","illustrations/snake-game/component.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","models/canvas.ts"],"names":["Point","canvas","x","y","this","size","color","drawFilledRect","SnakeGameController","e","interval","setTimeout","playerScore","gameRunning","backgroundColor","homeScreenTextColor","userScoreColor","currentDirection","body","minLength","currentSnakePosition","currentBallPosition","Canvas","width","height","push","reset","generateRandomBallPosition","setInterval","render","bind","clearInterval","drawBackground","renderGame","updateGameState","renderStartScreen","start","nextDirection","currDir","availableDirections","indexOf","length","shift","showSnake","drawBall","drawScore","moveSnake","pruneArray","moves","checkCollisionWithSelf","forEach","b","stop","widthCount","heightCount","generateNew","Math","floor","random","currentBallPositionCollidesWithSnake","doesCollide","p","block","draw","undefined","t1","writeText","t2","1000","100","10","1","Component","props","setDataAttributes","canvasEl","canvasRef","current","component","tabIndex","focus","addEventListener","event","preventDefault","key","onEnterPress","includes","changeSnakeDirection","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","i","descriptor","enumerable","configurable","writable","Object","defineProperty","_createClass","protoProps","staticProps","prototype","canvasContext","drawBitmap","drawOutlineRect","drawLine","drawFilledCircle","getContext","getBoundingClientRect","setTransform","useBitmap","angle","save","translate","rotate","drawImage","restore","fillStyle","fillRect","strokeStyle","strokeRect","radius","beginPath","moveTo","arcTo","stroke","x1","y1","x2","y2","lineWidth","lineTo","dashParams","setLineDash","centerX","centerY","arc","PI","fill","text","fontSize","fillText"],"mappings":"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","file":"static/js/22.e1cdca45.chunk.js","sourcesContent":["import Canvas from \"src/models/canvas\";\n\nclass Point {\n  private static color = \"blue\";\n  static size = 10;\n\n  constructor(private canvas: Canvas, public x: number, public y: number) {}\n\n  draw() {\n    const { x, y } = this;\n    const { size, color } = Point;\n    const offset = 1;\n    this.canvas.drawFilledRect(x, y, size - offset, size - offset, color);\n  }\n}\n\ninterface AvailableDirections {\n  [key: string]: string[];\n  \"1000\": string[];\n  \"100\": string[];\n  \"10\": string[];\n  \"1\": string[];\n}\n\ninterface Moves {\n  [key: string]: { x: number; y: number };\n  \"1000\": { x: number; y: number };\n  \"100\": { x: number; y: number };\n  \"10\": { x: number; y: number };\n  \"1\": { x: number; y: number };\n}\n\nexport class SnakeGameController {\n  private static readonly availableDirections: AvailableDirections = {\n    1000: [\"1\", \"100\"],\n    100: [\"1000\", \"10\"],\n    10: [\"100\", \"1\"],\n    1: [\"10\", \"1000\"],\n  };\n\n  private static readonly moves: Moves = {\n    1000: { x: 0, y: -1 },\n    100: { x: 1, y: 0 },\n    10: { x: 0, y: 1 },\n    1: { x: -1, y: 0 },\n  };\n\n  private readonly canvas: Canvas;\n  private interval = setTimeout(() => {}, 0);\n\n  private playerScore = 0;\n\n  private gameRunning = false;\n\n  private readonly backgroundColor = \"white\";\n  private readonly homeScreenTextColor = \"black\";\n  private readonly userScoreColor = \"green\";\n\n  private currentDirection = \"10\";\n\n  private body: Point[] = [];\n  private readonly minLength = 3;\n\n  private currentSnakePosition: { x: number; y: number } | null = null;\n  private currentBallPosition: { x: number; y: number } | null = null;\n\n  constructor(e: HTMLCanvasElement) {\n    this.canvas = new Canvas(e);\n  }\n\n  reset() {\n    const { width, height } = this.canvas;\n\n    this.body = [];\n    this.currentSnakePosition = {\n      x: width / 2,\n      y: height / 2,\n    };\n    this.body.push(\n      new Point(\n        this.canvas,\n        this.currentSnakePosition.x,\n        this.currentSnakePosition.y\n      )\n    );\n    this.playerScore = 0;\n  }\n\n  start() {\n    this.reset();\n    this.generateRandomBallPosition();\n    this.interval = setInterval(this.render.bind(this), 1000 / 10);\n  }\n\n  stop() {\n    this.gameRunning = false;\n    clearInterval(this.interval);\n    this.render();\n  }\n\n  render() {\n    this.drawBackground();\n    if (this.gameRunning) {\n      this.renderGame();\n      this.updateGameState();\n    } else {\n      this.renderStartScreen();\n      clearInterval(this.interval);\n    }\n  }\n\n  onEnterPress() {\n    if (!this.gameRunning) {\n      this.start();\n    }\n    this.gameRunning = true;\n  }\n\n  changeSnakeDirection(nextDirection: string) {\n    const currDir = this.currentDirection;\n    if (\n      SnakeGameController.availableDirections[currDir].indexOf(\n        nextDirection\n      ) !== -1\n    ) {\n      this.currentDirection = nextDirection;\n    }\n  }\n\n  private pruneArray() {\n    while (this.body.length > this.minLength + this.playerScore) {\n      this.body.shift();\n    }\n  }\n\n  private renderGame() {\n    this.showSnake();\n    this.drawBall();\n    this.drawScore();\n  }\n\n  private updateGameState() {\n    this.moveSnake();\n    this.pruneArray();\n  }\n\n  private moveSnake() {\n    this.currentSnakePosition = this.currentSnakePosition as {\n      x: number;\n      y: number;\n    };\n    this.currentSnakePosition.x +=\n      SnakeGameController.moves[this.currentDirection].x * Point.size;\n    this.currentSnakePosition.y +=\n      SnakeGameController.moves[this.currentDirection].y * Point.size;\n\n    this.currentSnakePosition.x += this.canvas.width;\n    this.currentSnakePosition.x %= this.canvas.width;\n\n    this.currentSnakePosition.y += this.canvas.height;\n    this.currentSnakePosition.y %= this.canvas.height;\n\n    const { x, y } = this.currentSnakePosition;\n    this.checkCollisionWithSelf(x, y);\n\n    this.body.push(\n      new Point(\n        this.canvas,\n        this.currentSnakePosition.x,\n        this.currentSnakePosition.y\n      )\n    );\n\n    this.currentBallPosition = this.currentBallPosition as {\n      x: number;\n      y: number;\n    };\n    if (x === this.currentBallPosition.x && y === this.currentBallPosition.y) {\n      this.playerScore++;\n      this.generateRandomBallPosition();\n    }\n  }\n\n  private checkCollisionWithSelf(x: number, y: number) {\n    this.body.forEach((b) => {\n      if (b.x === x && b.y === y) {\n        this.stop();\n      }\n    });\n  }\n\n  private generateRandomBallPosition() {\n    const { width, height } = this.canvas;\n    const widthCount = width / Point.size;\n    const heightCount = height / Point.size;\n\n    const generateNew = () => {\n      this.currentBallPosition = {\n        x: Math.floor(Math.random() * widthCount) * Point.size,\n        y: Math.floor(Math.random() * heightCount) * Point.size,\n      };\n    };\n\n    generateNew();\n    while (this.currentBallPositionCollidesWithSnake()) {\n      generateNew();\n    }\n  }\n\n  private currentBallPositionCollidesWithSnake() {\n    const { x, y } = this.currentBallPosition as { x: number; y: number };\n    let doesCollide = false;\n    this.body.forEach((p) => {\n      doesCollide = p.x === x && p.y === y;\n    });\n    return doesCollide;\n  }\n\n  private showSnake() {\n    this.body.forEach((block) => block.draw());\n  }\n\n  private drawBall() {\n    if (this.currentBallPosition === undefined) {\n      return;\n    }\n    const { x, y } = this.currentBallPosition as { x: number; y: number };\n    this.canvas.drawFilledRect(x, y, Point.size - 1, Point.size - 1, \"red\");\n  }\n\n  private drawScore() {\n    const t1 = `Your score: ${this.playerScore}`;\n\n    this.canvas.writeText(t1, 18, 15, 15, this.homeScreenTextColor);\n  }\n\n  private renderStartScreen() {\n    const t1 = \"Click on the canvas and hit 'Enter' to start\";\n\n    const { homeScreenTextColor, userScoreColor, playerScore } = this;\n    const { height } = this.canvas;\n\n    this.canvas.writeText(t1, 150, height / 2, 30, homeScreenTextColor);\n\n    const t2 = `Your score: ${playerScore}`;\n    this.canvas.writeText(t2, 220, 180, 30, userScoreColor);\n  }\n\n  private drawBackground() {\n    const { backgroundColor } = this;\n    const { width, height } = this.canvas;\n\n    this.canvas.drawFilledRect(0, 0, width, height, backgroundColor);\n  }\n}\n","import React from \"react\";\nimport DataAttributes from \"src/models/data-attributes\";\nimport { SnakeGameController } from \"./controller\";\n\ntype PropsType = {\n  canvasRef: React.RefObject<HTMLCanvasElement>;\n  setDataAttributes: (v: DataAttributes) => void;\n};\n\nfunction Component(props: PropsType) {\n  // remove all the attributes from other non-game components\n  props.setDataAttributes({});\n\n  const canvasEl = props.canvasRef.current as HTMLCanvasElement;\n  const component = new SnakeGameController(canvasEl);\n  canvasEl.tabIndex = 1;\n  canvasEl.focus();\n  component.start();\n\n  canvasEl.addEventListener(\"keyup\", (event) => {\n    event.preventDefault();\n    if (event.key === \"Enter\") {\n      component.onEnterPress();\n    } else if ([\"ArrowDown\", \"s\", \"S\"].includes(event.key)) {\n      component.changeSnakeDirection(\"10\");\n    } else if ([\"ArrowUp\", \"w\", \"W\"].includes(event.key)) {\n      component.changeSnakeDirection(\"1000\");\n    } else if ([\"ArrowLeft\", \"a\", \"A\"].includes(event.key)) {\n      component.changeSnakeDirection(\"1\");\n    } else if ([\"ArrowRight\", \"d\", \"D\"].includes(event.key)) {\n      component.changeSnakeDirection(\"100\");\n    }\n  });\n\n  return <></>;\n}\n\nexport default Component;\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","export default class Canvas {\n    private canvas: HTMLCanvasElement;\n    private canvasContext: CanvasRenderingContext2D;\n\n    get getBoundingClientRect() {\n        return this.canvas.getBoundingClientRect();\n    }\n\n    get width(): number {\n        return this.canvas.width;\n    }\n\n    get height(): number {\n        return this.canvas.height;\n    }\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.drawBitmap = this.drawBitmap.bind(this);\n        this.drawFilledRect = this.drawFilledRect.bind(this);\n        this.drawOutlineRect = this.drawOutlineRect.bind(this);\n        this.drawLine = this.drawLine.bind(this);\n        this.drawFilledCircle = this.drawFilledCircle.bind(this);\n        this.drawBitmap = this.drawBitmap.bind(this);\n        this.writeText = this.writeText.bind(this);\n\n        this.canvas = canvas;\n        this.canvasContext =\n            this.canvas.getContext('2d') as CanvasRenderingContext2D;\n        this.reset();\n    }\n\n    reset() {\n        this.canvasContext.setTransform(1, 0, 0, 1, 0, 0);\n    }\n\n    drawBitmap(useBitmap: CanvasImageSource, x: number, y: number, angle: number) {\n        this.canvasContext.save();\n        this.canvasContext.translate(x, y);\n        this.canvasContext.rotate(angle);\n        this.canvasContext.drawImage(useBitmap, -useBitmap.width / 2, -useBitmap.height / 2);\n        this.canvasContext.restore();\n    }\n\n    drawFilledRect(x: number, y: number, width: number, height: number, color: string) {\n        this.canvasContext.fillStyle = color;\n        this.canvasContext.fillRect(x, y, width, height);\n    }\n\n    drawOutlineRect(x: number, y: number, width: number, height: number, color: string) {\n        this.canvasContext.strokeStyle = color;\n        this.canvasContext.strokeRect(x, y, width, height);\n    }\n\n    drawRoundedRect(\n        x: number, y: number, width: number, height: number, radius: number, color: string\n    ) {\n        this.canvasContext.beginPath();\n        this.canvasContext.strokeStyle = color;\n        this.canvasContext.moveTo(x + width - radius, y + height);\n        this.canvasContext.arcTo(x, y + height, x, y, radius);\n        this.canvasContext.arcTo(x, y, x + width, y, radius);\n        this.canvasContext.arcTo(x + width, y, x + width, y + height, radius);\n        this.canvasContext.arcTo(x + width, y + height, x, y + height, radius);\n        this.canvasContext.stroke();\n    }\n\n    drawLine(x1: number, y1: number, x2: number, y2: number, lineWidth: number, color: string) {\n        this.canvasContext.save();\n        this.canvasContext.beginPath();\n        this.canvasContext.lineWidth = lineWidth;\n        this.canvasContext.strokeStyle = color;\n        this.canvasContext.moveTo(x1, y1);\n        this.canvasContext.lineTo(x2, y2);\n        this.canvasContext.stroke();\n        this.canvasContext.restore();\n    }\n\n    drawDashedLine(x1: number, y1: number, x2: number, y2: number, lineWidth: number, color: string, dashParams: number[]) {\n        this.canvasContext.setLineDash(dashParams);\n        this.drawLine(x1, y1, x2, y2, lineWidth, color);\n        this.canvasContext.setLineDash([]);\n    }\n\n    drawFilledCircle(centerX: number, centerY: number, radius: number, color: string) {\n        this.canvasContext.beginPath();\n        this.canvasContext.fillStyle = color;\n        this.canvasContext.arc(centerX, centerY, radius, 0, 2 * Math.PI, true);\n        this.canvasContext.fill();\n    }\n\n    writeText(text: string, x: number, y: number, fontSize: number, color: string) {\n        this.canvasContext.fillStyle = color;\n        this.canvasContext.fillText(text, x, y);\n    }\n\n    translate(x: number, y: number) {\n        this.canvasContext.translate(x, y);\n    }\n\n    rotate(angle: number) {\n        this.canvasContext.rotate(angle);\n    }\n\n    pushState() {\n        this.canvasContext.save();\n    }\n\n    popState() {\n        this.canvasContext.restore();\n    }\n}\n\n\n// Mouse handler\n// let mouseX, mouseY;\n// canvas-container.addEventListener('mousemove', function (event) {\n//         let rect = canvas-container.getBoundingClientRect();\n//         let root = document.documentElement;\n\n//         mouseX = event.clientX - rect.left - root.scrollLeft;\n//         mouseY = event.clientY - rect.top - root.scrollTop;\n//     });\n"],"sourceRoot":""}