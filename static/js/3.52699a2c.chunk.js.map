{"version":3,"sources":["illustrations/barnsleys-fern/fern.ts","illustrations/barnsleys-fern/fern-controller.ts","illustrations/barnsleys-fern/component.tsx","illustrations/barnsleys-fern/index.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","models/canvas.ts"],"names":["Fern","x","y","nextX","nextY","r","Math","random","this","FernController","canvasElement","fern","canvas","Canvas","drawFilledRect","width","height","X","Y","plotX","plotY","drawFilledCircle","generateNext","Component","props","canvasRef","setDataAttributes","isAnimating","React","useRef","animationStart","current","program","animator","i","plot","update","requestAnimationFrame","dataAttributes","buttons","text","clickHandler","useEffect","connect","dispatch","v","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","canvasContext","drawBitmap","bind","drawOutlineRect","drawLine","writeText","getContext","reset","getBoundingClientRect","setTransform","useBitmap","angle","save","translate","rotate","drawImage","restore","color","fillStyle","fillRect","strokeStyle","strokeRect","radius","beginPath","moveTo","arcTo","stroke","x1","y1","x2","y2","lineWidth","lineTo","dashParams","setLineDash","centerX","centerY","arc","PI","fill","fontSize","fillText"],"mappings":"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","file":"static/js/3.52699a2c.chunk.js","sourcesContent":["export default class Fern {\n  private x = 0;\n  private y = 0;\n\n  get X(): number {\n    return this.x;\n  }\n\n  get Y(): number {\n    return this.y;\n  }\n\n  generateNext() {\n    const r = Math.random();\n    let nextX;\n    let nextY;\n\n    if (r < 0.01) {\n      nextX = 0;\n      nextY = 0.16 * this.y;\n    } else if (r < 0.86) {\n      nextX = 0.85 * this.x + 0.04 * this.y;\n      nextY = -0.04 * this.x + 0.85 * this.y + 1.6;\n    } else if (r < 0.93) {\n      nextX = 0.2 * this.x - 0.26 * this.y;\n      nextY = 0.23 * this.x + 0.22 * this.y + 1.6;\n    } else {\n      nextX = -0.15 * this.x + 0.28 * this.y;\n      nextY = 0.26 * this.x + 0.24 * this.y + 0.44;\n    }\n\n    this.x = nextX;\n    this.y = nextY;\n  }\n}\n","import Fern from \"./fern\";\nimport Canvas from \"src/models/canvas\";\n\nexport default class FernController {\n  fern = new Fern();\n  canvas: Canvas;\n\n  constructor(canvasElement: HTMLCanvasElement) {\n    this.canvas = new Canvas(canvasElement);\n    // Draw background\n    this.canvas.drawFilledRect(\n      0,\n      0,\n      this.canvas.width,\n      this.canvas.height,\n      \"white\"\n    );\n  }\n\n  plot() {\n    const { X, Y } = this.fern;\n\n    // transform and scale\n    const plotX = (this.canvas.width * X) / 6 + 250;\n    const plotY = (this.canvas.height - 20) * (1 - Y / 10) + 10;\n\n    this.canvas.drawFilledCircle(plotX, plotY, 1, \"green\");\n  }\n\n  update() {\n    this.fern.generateNext();\n  }\n}\n","import React, { useEffect } from \"react\";\nimport DataAttributes from \"src/models/data-attributes\";\n\nimport FernController from \"./fern-controller\";\n\ntype PropsType = {\n  canvasRef: React.RefObject<HTMLCanvasElement>;\n  setDataAttributes: (v: DataAttributes) => void;\n};\n\nfunction Component(props: PropsType) {\n  const { canvasRef, setDataAttributes } = props;\n\n  let isAnimating = React.useRef<boolean>();\n\n  const animator = (program: FernController) => {\n    for (let i = 0; i < 50; i++) {\n      program.plot();\n      program.update();\n    }\n    if (isAnimating.current) {\n      requestAnimationFrame(() => animator(program));\n    }\n  };\n\n  const animationStart = () => {\n    if (isAnimating.current) {\n      return;\n    }\n    const program = new FernController(canvasRef.current as HTMLCanvasElement);\n    isAnimating.current = true;\n    animator(program);\n  };\n\n  const dataAttributes: DataAttributes = {\n    buttons: [\n      {\n        text: \"Start\",\n        clickHandler: () => {\n          animationStart();\n        },\n      },\n    ],\n  };\n  useEffect(() => {\n    setDataAttributes(dataAttributes);\n    return () => {\n      isAnimating.current = false;\n    };\n  }, [setDataAttributes, dataAttributes]);\n\n  return <></>;\n}\n\nexport default Component;\n","import { Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\n\nimport DataAttributes from \"src/models/data-attributes\";\nimport { setDataAttributes } from \"src/redux-impl/data-attributes/actions\";\n\nimport Component from \"./component\";\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n  return {\n    setDataAttributes: (v: DataAttributes) => dispatch(setDataAttributes(v)),\n  };\n}\n\nexport default connect(null, mapDispatchToProps)(Component);\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","export default class Canvas {\n    private canvas: HTMLCanvasElement;\n    private canvasContext: CanvasRenderingContext2D;\n\n    get getBoundingClientRect() {\n        return this.canvas.getBoundingClientRect();\n    }\n\n    get width(): number {\n        return this.canvas.width;\n    }\n\n    get height(): number {\n        return this.canvas.height;\n    }\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.drawBitmap = this.drawBitmap.bind(this);\n        this.drawFilledRect = this.drawFilledRect.bind(this);\n        this.drawOutlineRect = this.drawOutlineRect.bind(this);\n        this.drawLine = this.drawLine.bind(this);\n        this.drawFilledCircle = this.drawFilledCircle.bind(this);\n        this.drawBitmap = this.drawBitmap.bind(this);\n        this.writeText = this.writeText.bind(this);\n\n        this.canvas = canvas;\n        this.canvasContext =\n            this.canvas.getContext('2d') as CanvasRenderingContext2D;\n        this.reset();\n    }\n\n    reset() {\n        this.canvasContext.setTransform(1, 0, 0, 1, 0, 0);\n    }\n\n    drawBitmap(useBitmap: CanvasImageSource, x: number, y: number, angle: number) {\n        this.canvasContext.save();\n        this.canvasContext.translate(x, y);\n        this.canvasContext.rotate(angle);\n        this.canvasContext.drawImage(useBitmap, -useBitmap.width / 2, -useBitmap.height / 2);\n        this.canvasContext.restore();\n    }\n\n    drawFilledRect(x: number, y: number, width: number, height: number, color: string) {\n        this.canvasContext.fillStyle = color;\n        this.canvasContext.fillRect(x, y, width, height);\n    }\n\n    drawOutlineRect(x: number, y: number, width: number, height: number, color: string) {\n        this.canvasContext.strokeStyle = color;\n        this.canvasContext.strokeRect(x, y, width, height);\n    }\n\n    drawRoundedRect(\n        x: number, y: number, width: number, height: number, radius: number, color: string\n    ) {\n        this.canvasContext.beginPath();\n        this.canvasContext.strokeStyle = color;\n        this.canvasContext.moveTo(x + width - radius, y + height);\n        this.canvasContext.arcTo(x, y + height, x, y, radius);\n        this.canvasContext.arcTo(x, y, x + width, y, radius);\n        this.canvasContext.arcTo(x + width, y, x + width, y + height, radius);\n        this.canvasContext.arcTo(x + width, y + height, x, y + height, radius);\n        this.canvasContext.stroke();\n    }\n\n    drawLine(x1: number, y1: number, x2: number, y2: number, lineWidth: number, color: string) {\n        this.canvasContext.save();\n        this.canvasContext.beginPath();\n        this.canvasContext.lineWidth = lineWidth;\n        this.canvasContext.strokeStyle = color;\n        this.canvasContext.moveTo(x1, y1);\n        this.canvasContext.lineTo(x2, y2);\n        this.canvasContext.stroke();\n        this.canvasContext.restore();\n    }\n\n    drawDashedLine(x1: number, y1: number, x2: number, y2: number, lineWidth: number, color: string, dashParams: number[]) {\n        this.canvasContext.setLineDash(dashParams);\n        this.drawLine(x1, y1, x2, y2, lineWidth, color);\n        this.canvasContext.setLineDash([]);\n    }\n\n    drawFilledCircle(centerX: number, centerY: number, radius: number, color: string) {\n        this.canvasContext.beginPath();\n        this.canvasContext.fillStyle = color;\n        this.canvasContext.arc(centerX, centerY, radius, 0, 2 * Math.PI, true);\n        this.canvasContext.fill();\n    }\n\n    writeText(text: string, x: number, y: number, fontSize: number, color: string) {\n        this.canvasContext.fillStyle = color;\n        this.canvasContext.fillText(text, x, y);\n    }\n\n    translate(x: number, y: number) {\n        this.canvasContext.translate(x, y);\n    }\n\n    rotate(angle: number) {\n        this.canvasContext.rotate(angle);\n    }\n\n    pushState() {\n        this.canvasContext.save();\n    }\n\n    popState() {\n        this.canvasContext.restore();\n    }\n}\n\n\n// Mouse handler\n// let mouseX, mouseY;\n// canvas-container.addEventListener('mousemove', function (event) {\n//         let rect = canvas-container.getBoundingClientRect();\n//         let root = document.documentElement;\n\n//         mouseX = event.clientX - rect.left - root.scrollLeft;\n//         mouseY = event.clientY - rect.top - root.scrollTop;\n//     });\n"],"sourceRoot":""}