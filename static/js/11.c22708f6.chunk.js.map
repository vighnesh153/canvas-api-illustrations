{"version":3,"sources":["illustrations/symmetric-binary-tree/index.ts","illustrations/symmetric-binary-tree/controller.ts","illustrations/symmetric-binary-tree/component.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","models/canvas.ts"],"names":["connect","dispatch","setDataAttributes","v","Component","SymmetricBinaryTreeController","canvasElement","angle","lengthScaleDownFactor","initialBranchLength","canvas","lineWidth","branchLengthScaleDownFactor","this","Canvas","drawFilledRect","width","height","translate","draw","length","drawLine","pushState","rotate","popState","props","canvasRef","canvasEl","current","currentAngle","currentBranchLength","currentBranchScaleDownFactor","animate","plot","lastUpdate","Date","now","prepAndAnimate","dataAttributes","rangeInputs","title","note","min","max","Math","PI","step","currentValue","onChange","value","useEffect","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","i","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","canvasContext","drawBitmap","bind","drawOutlineRect","drawFilledCircle","writeText","getContext","reset","getBoundingClientRect","setTransform","useBitmap","x","y","save","drawImage","restore","color","fillStyle","fillRect","strokeStyle","strokeRect","radius","beginPath","moveTo","arcTo","stroke","x1","y1","x2","y2","lineTo","dashParams","setLineDash","centerX","centerY","arc","fill","text","fontSize","fillText"],"mappings":"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","file":"static/js/11.c22708f6.chunk.js","sourcesContent":["import { Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\n\nimport DataAttributes from \"src/models/data-attributes\";\nimport { setDataAttributes } from \"src/redux-impl/data-attributes/actions\";\n\nimport Component from \"./component\";\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n  return {\n    setDataAttributes: (v: DataAttributes) => dispatch(setDataAttributes(v)),\n  };\n}\n\nexport default connect(null, mapDispatchToProps)(Component);\n","import Canvas from \"src/models/canvas\";\n\nexport default class SymmetricBinaryTreeController {\n  canvas: Canvas;\n\n  lineWidth = 2;\n\n  angle: number;\n  branchLengthScaleDownFactor: number;\n  initialBranchLength: number;\n\n  constructor(\n    canvasElement: HTMLCanvasElement,\n    angle: number,\n    lengthScaleDownFactor: number,\n    initialBranchLength: number\n  ) {\n    this.canvas = new Canvas(canvasElement);\n    // Draw background\n    this.canvas.drawFilledRect(\n      0,\n      0,\n      this.canvas.width,\n      this.canvas.height,\n      \"black\"\n    );\n    this.angle = angle;\n    this.branchLengthScaleDownFactor = lengthScaleDownFactor;\n    this.initialBranchLength = initialBranchLength;\n  }\n\n  plot() {\n    this.canvas.translate(this.canvas.width / 2, this.canvas.height - 2);\n    this.draw(this.initialBranchLength);\n  }\n\n  draw(length: number) {\n    this.canvas.drawLine(0, 0, 0, -length, this.lineWidth, \"white\");\n    this.canvas.translate(0, -length);\n\n    if (length < 4) {\n      return;\n    }\n\n    this.canvas.pushState();\n    this.canvas.rotate(this.angle);\n    this.draw(length * this.branchLengthScaleDownFactor);\n    this.canvas.popState();\n\n    this.canvas.pushState();\n    this.canvas.rotate(-this.angle);\n    this.draw(length * this.branchLengthScaleDownFactor);\n    this.canvas.popState();\n  }\n}\n","import React, { useEffect } from \"react\";\nimport DataAttributes from \"src/models/data-attributes\";\nimport SymmetricBinaryTreeController from \"src/illustrations/symmetric-binary-tree/controller\";\n\ntype PropsType = {\n  canvasRef: React.RefObject<HTMLCanvasElement>;\n  setDataAttributes: (v: DataAttributes) => void;\n};\n\nfunction Component(props: PropsType) {\n  const { canvasRef, setDataAttributes } = props;\n  const canvasEl = canvasRef.current as HTMLCanvasElement;\n\n  let currentAngle = 0.47;\n  let currentBranchLength = 60;\n  let currentBranchScaleDownFactor = 0.75;\n\n  const animate = () => {\n    const program = new SymmetricBinaryTreeController(\n      canvasEl,\n      currentAngle,\n      currentBranchScaleDownFactor,\n      currentBranchLength\n    );\n    program.plot();\n  };\n\n  let lastUpdate = Date.now();\n  const prepAndAnimate = () => {\n    if (Date.now() - lastUpdate > 20) {\n      lastUpdate = Date.now();\n      animate();\n    }\n  };\n\n  const dataAttributes: DataAttributes = {\n    rangeInputs: [\n      {\n        title: \"Angle\",\n        note: \"\",\n        min: 0,\n        max: 2 * Math.PI,\n        step: 0.01,\n        currentValue: currentAngle,\n        onChange: (value: number) => {\n          currentAngle = value;\n          prepAndAnimate();\n        },\n      },\n      {\n        title: \"Initial branch length\",\n        note: \"\",\n        min: 50,\n        max: 70,\n        step: 0.01,\n        currentValue: currentBranchLength,\n        onChange: (value: number) => {\n          currentBranchLength = value;\n          prepAndAnimate();\n        },\n      },\n      {\n        title: \"Branch length scale down factor\",\n        note: \"\",\n        min: 0,\n        max: 0.75,\n        step: 0.01,\n        currentValue: currentBranchScaleDownFactor,\n        onChange: (value: number) => {\n          currentBranchScaleDownFactor = value;\n          prepAndAnimate();\n        },\n      },\n    ],\n  };\n\n  useEffect(() => {\n    setDataAttributes(dataAttributes);\n  }, [setDataAttributes, dataAttributes]);\n\n  animate();\n\n  return <></>;\n}\n\nexport default Component;\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","export default class Canvas {\n    private canvas: HTMLCanvasElement;\n    private canvasContext: CanvasRenderingContext2D;\n\n    get getBoundingClientRect() {\n        return this.canvas.getBoundingClientRect();\n    }\n\n    get width(): number {\n        return this.canvas.width;\n    }\n\n    get height(): number {\n        return this.canvas.height;\n    }\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.drawBitmap = this.drawBitmap.bind(this);\n        this.drawFilledRect = this.drawFilledRect.bind(this);\n        this.drawOutlineRect = this.drawOutlineRect.bind(this);\n        this.drawLine = this.drawLine.bind(this);\n        this.drawFilledCircle = this.drawFilledCircle.bind(this);\n        this.drawBitmap = this.drawBitmap.bind(this);\n        this.writeText = this.writeText.bind(this);\n\n        this.canvas = canvas;\n        this.canvasContext =\n            this.canvas.getContext('2d') as CanvasRenderingContext2D;\n        this.reset();\n    }\n\n    reset() {\n        this.canvasContext.setTransform(1, 0, 0, 1, 0, 0);\n    }\n\n    drawBitmap(useBitmap: CanvasImageSource, x: number, y: number, angle: number) {\n        this.canvasContext.save();\n        this.canvasContext.translate(x, y);\n        this.canvasContext.rotate(angle);\n        this.canvasContext.drawImage(useBitmap, -useBitmap.width / 2, -useBitmap.height / 2);\n        this.canvasContext.restore();\n    }\n\n    drawFilledRect(x: number, y: number, width: number, height: number, color: string) {\n        this.canvasContext.fillStyle = color;\n        this.canvasContext.fillRect(x, y, width, height);\n    }\n\n    drawOutlineRect(x: number, y: number, width: number, height: number, color: string) {\n        this.canvasContext.strokeStyle = color;\n        this.canvasContext.strokeRect(x, y, width, height);\n    }\n\n    drawRoundedRect(\n        x: number, y: number, width: number, height: number, radius: number, color: string\n    ) {\n        this.canvasContext.beginPath();\n        this.canvasContext.strokeStyle = color;\n        this.canvasContext.moveTo(x + width - radius, y + height);\n        this.canvasContext.arcTo(x, y + height, x, y, radius);\n        this.canvasContext.arcTo(x, y, x + width, y, radius);\n        this.canvasContext.arcTo(x + width, y, x + width, y + height, radius);\n        this.canvasContext.arcTo(x + width, y + height, x, y + height, radius);\n        this.canvasContext.stroke();\n    }\n\n    drawLine(x1: number, y1: number, x2: number, y2: number, lineWidth: number, color: string) {\n        this.canvasContext.save();\n        this.canvasContext.beginPath();\n        this.canvasContext.lineWidth = lineWidth;\n        this.canvasContext.strokeStyle = color;\n        this.canvasContext.moveTo(x1, y1);\n        this.canvasContext.lineTo(x2, y2);\n        this.canvasContext.stroke();\n        this.canvasContext.restore();\n    }\n\n    drawDashedLine(x1: number, y1: number, x2: number, y2: number, lineWidth: number, color: string, dashParams: number[]) {\n        this.canvasContext.setLineDash(dashParams);\n        this.drawLine(x1, y1, x2, y2, lineWidth, color);\n        this.canvasContext.setLineDash([]);\n    }\n\n    drawFilledCircle(centerX: number, centerY: number, radius: number, color: string) {\n        this.canvasContext.beginPath();\n        this.canvasContext.fillStyle = color;\n        this.canvasContext.arc(centerX, centerY, radius, 0, 2 * Math.PI, true);\n        this.canvasContext.fill();\n    }\n\n    writeText(text: string, x: number, y: number, fontSize: number, color: string) {\n        this.canvasContext.fillStyle = color;\n        this.canvasContext.fillText(text, x, y);\n    }\n\n    translate(x: number, y: number) {\n        this.canvasContext.translate(x, y);\n    }\n\n    rotate(angle: number) {\n        this.canvasContext.rotate(angle);\n    }\n\n    pushState() {\n        this.canvasContext.save();\n    }\n\n    popState() {\n        this.canvasContext.restore();\n    }\n}\n\n\n// Mouse handler\n// let mouseX, mouseY;\n// canvas-container.addEventListener('mousemove', function (event) {\n//         let rect = canvas-container.getBoundingClientRect();\n//         let root = document.documentElement;\n\n//         mouseX = event.clientX - rect.left - root.scrollLeft;\n//         mouseY = event.clientY - rect.top - root.scrollTop;\n//     });\n"],"sourceRoot":""}