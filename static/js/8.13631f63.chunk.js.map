{"version":3,"sources":["illustrations/sierpinski-triangle/index.ts","illustrations/sierpinski-triangle/controller.ts","illustrations/sierpinski-triangle/component.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","models/canvas.ts"],"names":["connect","dispatch","setDataAttributes","v","Component","SierpinskiTriangleController","canvasElement","canvas","a","x","y","b","c","next","this","Canvas","drawFilledRect","width","height","drawFilledCircle","points","randomIndex","Math","floor","random","newX","newY","props","canvasRef","canvasEl","current","isAnimating","useRef","animationStart","animator","program","i","plot","update","console","log","requestAnimationFrame","dataAttributes","buttons","text","clickHandler","useEffect","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","canvasContext","drawBitmap","bind","drawOutlineRect","drawLine","writeText","getContext","reset","getBoundingClientRect","setTransform","useBitmap","angle","save","translate","rotate","drawImage","restore","color","fillStyle","fillRect","strokeStyle","strokeRect","radius","beginPath","moveTo","arcTo","stroke","x1","y1","x2","y2","lineWidth","lineTo","dashParams","setLineDash","centerX","centerY","arc","PI","fill","fontSize","fillText"],"mappings":"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","file":"static/js/8.13631f63.chunk.js","sourcesContent":["import { Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\n\nimport DataAttributes from \"src/models/data-attributes\";\nimport { setDataAttributes } from \"src/redux-impl/data-attributes/actions\";\n\nimport Component from \"./component\";\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n  return {\n    setDataAttributes: (v: DataAttributes) => dispatch(setDataAttributes(v)),\n  };\n}\n\nexport default connect(null, mapDispatchToProps)(Component);\n","import Canvas from \"src/models/canvas\";\n\ninterface Point {\n  x: number;\n  y: number;\n}\n\nexport default class SierpinskiTriangleController {\n  canvas: Canvas;\n  a: Point = { x: 250, y: 50 };\n  b: Point = { x: 100, y: 250 };\n  c: Point = { x: 400, y: 250 };\n\n  next: Point = { x: this.a.x, y: this.a.y };\n\n  constructor(canvasElement: HTMLCanvasElement) {\n    this.canvas = new Canvas(canvasElement);\n    // Draw background\n    this.canvas.drawFilledRect(\n      0,\n      0,\n      this.canvas.width,\n      this.canvas.height,\n      \"black\"\n    );\n\n    // Initial points\n    const initialPointsColor = \"red\";\n    this.canvas.drawFilledCircle(this.a.x, this.a.y, 2, initialPointsColor);\n    this.canvas.drawFilledCircle(this.b.x, this.b.y, 2, initialPointsColor);\n    this.canvas.drawFilledCircle(this.c.x, this.c.y, 2, initialPointsColor);\n  }\n\n  plot() {\n    this.canvas.drawFilledCircle(this.next.x, this.next.y, 1, \"white\");\n  }\n\n  update() {\n    const points = [this.a, this.b, this.c];\n    const randomIndex = Math.floor(Math.random() * 3);\n\n    const newX = (points[randomIndex].x + this.next.x) / 2;\n    const newY = (points[randomIndex].y + this.next.y) / 2;\n\n    this.next.x = newX;\n    this.next.y = newY;\n  }\n}\n","import React, { useEffect, useRef } from \"react\";\nimport DataAttributes from \"src/models/data-attributes\";\nimport SierpinskiTriangleController from \"./controller\";\n\ntype PropsType = {\n  canvasRef: React.RefObject<HTMLCanvasElement>;\n  setDataAttributes: (v: DataAttributes) => void;\n};\n\nfunction Component(props: PropsType) {\n  const { canvasRef, setDataAttributes } = props;\n  const canvasEl = canvasRef.current as HTMLCanvasElement;\n  const isAnimating = useRef<boolean>();\n\n  const animator = (program: SierpinskiTriangleController) => {\n    for (let i = 0; i < 20; i++) {\n      program.plot();\n      program.update();\n    }\n    console.log(\"running\");\n\n    if (isAnimating.current) {\n      requestAnimationFrame(() => animator(program));\n    }\n  };\n\n  const animationStart = () => {\n    if (isAnimating.current) {\n      return;\n    }\n    isAnimating.current = true;\n\n    const program = new SierpinskiTriangleController(canvasEl);\n    animator(program);\n  };\n\n  const dataAttributes: DataAttributes = {\n    buttons: [\n      {\n        text: \"START\",\n        clickHandler: () => {\n          animationStart();\n        },\n      },\n    ],\n  };\n\n  useEffect(() => {\n    setDataAttributes(dataAttributes);\n    return () => {\n      isAnimating.current = false;\n    };\n  }, [setDataAttributes, dataAttributes]);\n\n  return <></>;\n}\n\nexport default Component;\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","export default class Canvas {\n    private canvas: HTMLCanvasElement;\n    private canvasContext: CanvasRenderingContext2D;\n\n    get getBoundingClientRect() {\n        return this.canvas.getBoundingClientRect();\n    }\n\n    get width(): number {\n        return this.canvas.width;\n    }\n\n    get height(): number {\n        return this.canvas.height;\n    }\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.drawBitmap = this.drawBitmap.bind(this);\n        this.drawFilledRect = this.drawFilledRect.bind(this);\n        this.drawOutlineRect = this.drawOutlineRect.bind(this);\n        this.drawLine = this.drawLine.bind(this);\n        this.drawFilledCircle = this.drawFilledCircle.bind(this);\n        this.drawBitmap = this.drawBitmap.bind(this);\n        this.writeText = this.writeText.bind(this);\n\n        this.canvas = canvas;\n        this.canvasContext =\n            this.canvas.getContext('2d') as CanvasRenderingContext2D;\n        this.reset();\n    }\n\n    reset() {\n        this.canvasContext.setTransform(1, 0, 0, 1, 0, 0);\n    }\n\n    drawBitmap(useBitmap: CanvasImageSource, x: number, y: number, angle: number) {\n        this.canvasContext.save();\n        this.canvasContext.translate(x, y);\n        this.canvasContext.rotate(angle);\n        this.canvasContext.drawImage(useBitmap, -useBitmap.width / 2, -useBitmap.height / 2);\n        this.canvasContext.restore();\n    }\n\n    drawFilledRect(x: number, y: number, width: number, height: number, color: string) {\n        this.canvasContext.fillStyle = color;\n        this.canvasContext.fillRect(x, y, width, height);\n    }\n\n    drawOutlineRect(x: number, y: number, width: number, height: number, color: string) {\n        this.canvasContext.strokeStyle = color;\n        this.canvasContext.strokeRect(x, y, width, height);\n    }\n\n    drawRoundedRect(\n        x: number, y: number, width: number, height: number, radius: number, color: string\n    ) {\n        this.canvasContext.beginPath();\n        this.canvasContext.strokeStyle = color;\n        this.canvasContext.moveTo(x + width - radius, y + height);\n        this.canvasContext.arcTo(x, y + height, x, y, radius);\n        this.canvasContext.arcTo(x, y, x + width, y, radius);\n        this.canvasContext.arcTo(x + width, y, x + width, y + height, radius);\n        this.canvasContext.arcTo(x + width, y + height, x, y + height, radius);\n        this.canvasContext.stroke();\n    }\n\n    drawLine(x1: number, y1: number, x2: number, y2: number, lineWidth: number, color: string) {\n        this.canvasContext.save();\n        this.canvasContext.beginPath();\n        this.canvasContext.lineWidth = lineWidth;\n        this.canvasContext.strokeStyle = color;\n        this.canvasContext.moveTo(x1, y1);\n        this.canvasContext.lineTo(x2, y2);\n        this.canvasContext.stroke();\n        this.canvasContext.restore();\n    }\n\n    drawDashedLine(x1: number, y1: number, x2: number, y2: number, lineWidth: number, color: string, dashParams: number[]) {\n        this.canvasContext.setLineDash(dashParams);\n        this.drawLine(x1, y1, x2, y2, lineWidth, color);\n        this.canvasContext.setLineDash([]);\n    }\n\n    drawFilledCircle(centerX: number, centerY: number, radius: number, color: string) {\n        this.canvasContext.beginPath();\n        this.canvasContext.fillStyle = color;\n        this.canvasContext.arc(centerX, centerY, radius, 0, 2 * Math.PI, true);\n        this.canvasContext.fill();\n    }\n\n    writeText(text: string, x: number, y: number, fontSize: number, color: string) {\n        this.canvasContext.fillStyle = color;\n        this.canvasContext.fillText(text, x, y);\n    }\n\n    translate(x: number, y: number) {\n        this.canvasContext.translate(x, y);\n    }\n\n    rotate(angle: number) {\n        this.canvasContext.rotate(angle);\n    }\n\n    pushState() {\n        this.canvasContext.save();\n    }\n\n    popState() {\n        this.canvasContext.restore();\n    }\n}\n\n\n// Mouse handler\n// let mouseX, mouseY;\n// canvas-container.addEventListener('mousemove', function (event) {\n//         let rect = canvas-container.getBoundingClientRect();\n//         let root = document.documentElement;\n\n//         mouseX = event.clientX - rect.left - root.scrollLeft;\n//         mouseY = event.clientY - rect.top - root.scrollTop;\n//     });\n"],"sourceRoot":""}