{"version":3,"sources":["illustrations/sort-algo-visualizer/controller.ts","illustrations/sort-algo-visualizer/component.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","models/canvas.ts"],"names":["SortingVisualizerController","canvasEl","canvas","arraySize","minimumLength","array","color","offsetFromGround","selectedSortAlgorithm","animationRunning","interval","map","bubble","function","getBubbleSortGenerator","timer","merge","getMergeSortGenerator","selection","getSelectionSortGenerator","insertion","getInsertionSortGenerator","this","Canvas","randomizeArray","setTimeout","prev","Infinity","isSorted","forEach","value","isArraySorted","generatorObject","setInterval","next","done","stopAnimation","drawFilledRect","width","height","maxHeight","floor","Math","random","i","push","undefined","clearBackground","index","generateRandomArray","plotArray","clearInterval","resetColor","v","Component","props","canvasRef","setDataAttributes","current","component","dataAttributes","buttons","text","clickHandler","startAnimation","selectFromDropDowns","title","onChange","options","returnValue","displayText","currentValue","useEffect","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","canvasContext","drawBitmap","bind","drawOutlineRect","drawLine","drawFilledCircle","writeText","getContext","reset","getBoundingClientRect","setTransform","useBitmap","x","y","angle","save","translate","rotate","drawImage","restore","fillStyle","fillRect","strokeStyle","strokeRect","radius","beginPath","moveTo","arcTo","stroke","x1","y1","x2","y2","lineWidth","lineTo","dashParams","setLineDash","centerX","centerY","arc","PI","fill","fontSize","fillText"],"mappings":"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","file":"static/js/23.5f45e57c.chunk.js","sourcesContent":["import Canvas from \"src/models/canvas\";\nimport {\n  getBubbleSortGenerator,\n  getInsertionSortGenerator,\n  getMergeSortGenerator,\n  getSelectionSortGenerator,\n} from \"./visualizer\";\n\ninterface SortAlgorithmMeta {\n  function: (o: SortingVisualizerController) => Generator;\n  timer: number;\n}\n\nexport default class SortingVisualizerController {\n  canvas: Canvas;\n\n  arraySize = 166;\n  minimumLength = 2;\n  array: number[];\n  color: string[];\n\n  offsetFromGround = 10;\n  selectedSortAlgorithm = \"bubble\";\n  animationRunning = false;\n\n  interval: NodeJS.Timeout;\n\n  map: { [key: string]: SortAlgorithmMeta } = {\n    bubble: {\n      function: getBubbleSortGenerator,\n      timer: 10,\n    },\n    merge: {\n      function: getMergeSortGenerator,\n      timer: 30,\n    },\n    selection: {\n      function: getSelectionSortGenerator,\n      timer: 50,\n    },\n    insertion: {\n      function: getInsertionSortGenerator,\n      timer: 10,\n    },\n  };\n\n  constructor(canvasEl: HTMLCanvasElement) {\n    this.color = [];\n    this.array = [];\n    this.canvas = new Canvas(canvasEl);\n    this.randomizeArray();\n    this.interval = setTimeout(() => {}, 0);\n  }\n\n  isArraySorted() {\n    let prev = -Infinity;\n    let isSorted = true;\n\n    this.array.forEach((value) => {\n      if (value < prev) {\n        isSorted = false;\n      }\n      prev = value;\n    });\n\n    return isSorted;\n  }\n\n  startAnimation() {\n    if (this.isArraySorted()) {\n      return;\n    }\n\n    this.animationRunning = true;\n    const generatorObject = this.map[this.selectedSortAlgorithm].function(this);\n    const timer = this.map[this.selectedSortAlgorithm].timer;\n\n    this.interval = setInterval(() => {\n      if (generatorObject.next().done) {\n        this.stopAnimation();\n      }\n    }, timer);\n  }\n\n  clearBackground() {\n    this.canvas.drawFilledRect(\n      0,\n      0,\n      this.canvas.width,\n      this.canvas.height,\n      \"black\"\n    );\n  }\n\n  generateRandomArray() {\n    this.stopAnimation();\n    this.array = [];\n    this.color = [];\n    const maxHeight = this.canvas.height - 50 - this.offsetFromGround;\n    const { floor, random } = Math;\n\n    for (let i = 0; i < this.arraySize; i++) {\n      this.array.push(floor(random() * maxHeight) + this.offsetFromGround);\n      this.color.push(\"white\");\n    }\n  }\n\n  plotArray(array?: number[]) {\n    if (array === undefined) {\n      array = this.array;\n    }\n    this.clearBackground();\n    array.forEach((value: number, index: number) => {\n      value += this.minimumLength;\n      this.canvas.drawFilledRect(\n        index * 3,\n        this.canvas.height - value,\n        2,\n        value - this.offsetFromGround,\n        this.color[index]\n      );\n    });\n  }\n\n  randomizeArray() {\n    this.generateRandomArray();\n    this.plotArray();\n  }\n\n  stopAnimation() {\n    this.animationRunning = false;\n    clearInterval(this.interval);\n    clearInterval(this.interval);\n    this.resetColor();\n    this.plotArray();\n  }\n\n  resetColor() {\n    this.color.forEach((v, i) => {\n      this.color[i] = \"white\";\n    });\n  }\n}\n","import React, { useEffect } from \"react\";\nimport DataAttributes from \"src/models/data-attributes\";\nimport SortingVisualizerController from \"src/illustrations/sort-algo-visualizer/controller\";\n\ntype PropsType = {\n  canvasRef: React.RefObject<HTMLCanvasElement>;\n  setDataAttributes: (v: DataAttributes) => void;\n};\n\nfunction Component(props: PropsType) {\n  const { canvasRef, setDataAttributes } = props;\n  const canvasEl = canvasRef.current as HTMLCanvasElement;\n  const component = new SortingVisualizerController(canvasEl);\n\n  const dataAttributes: DataAttributes = {\n    buttons: [\n      {\n        text: \"START\",\n        clickHandler: () => {\n          component.startAnimation();\n        },\n      },\n      {\n        text: \"Randomize Array\",\n        clickHandler: () => {\n          component.randomizeArray();\n        },\n      },\n      {\n        text: \"STOP\",\n        clickHandler: () => {\n          component.stopAnimation();\n        },\n      },\n    ],\n    selectFromDropDowns: [\n      {\n        title: \"Algorithm\",\n        onChange: (value) => {\n          component.selectedSortAlgorithm = value;\n        },\n        options: [\n          { returnValue: \"bubble\", displayText: \"Bubble sort\" },\n          { returnValue: \"merge\", displayText: \"Merge sort\" },\n          { returnValue: \"selection\", displayText: \"Selection sort\" },\n          { returnValue: \"insertion\", displayText: \"Insertion sort\" },\n        ],\n        currentValue: \"bubble\",\n      },\n    ],\n  };\n\n  useEffect(() => {\n    setDataAttributes(dataAttributes);\n    return () => {\n      component.stopAnimation();\n    };\n  }, [setDataAttributes, dataAttributes, component]);\n\n  return <></>;\n}\n\nexport default Component;\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","export default class Canvas {\n    private canvas: HTMLCanvasElement;\n    private canvasContext: CanvasRenderingContext2D;\n\n    get getBoundingClientRect() {\n        return this.canvas.getBoundingClientRect();\n    }\n\n    get width(): number {\n        return this.canvas.width;\n    }\n\n    get height(): number {\n        return this.canvas.height;\n    }\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.drawBitmap = this.drawBitmap.bind(this);\n        this.drawFilledRect = this.drawFilledRect.bind(this);\n        this.drawOutlineRect = this.drawOutlineRect.bind(this);\n        this.drawLine = this.drawLine.bind(this);\n        this.drawFilledCircle = this.drawFilledCircle.bind(this);\n        this.drawBitmap = this.drawBitmap.bind(this);\n        this.writeText = this.writeText.bind(this);\n\n        this.canvas = canvas;\n        this.canvasContext =\n            this.canvas.getContext('2d') as CanvasRenderingContext2D;\n        this.reset();\n    }\n\n    reset() {\n        this.canvasContext.setTransform(1, 0, 0, 1, 0, 0);\n    }\n\n    drawBitmap(useBitmap: CanvasImageSource, x: number, y: number, angle: number) {\n        this.canvasContext.save();\n        this.canvasContext.translate(x, y);\n        this.canvasContext.rotate(angle);\n        this.canvasContext.drawImage(useBitmap, -useBitmap.width / 2, -useBitmap.height / 2);\n        this.canvasContext.restore();\n    }\n\n    drawFilledRect(x: number, y: number, width: number, height: number, color: string) {\n        this.canvasContext.fillStyle = color;\n        this.canvasContext.fillRect(x, y, width, height);\n    }\n\n    drawOutlineRect(x: number, y: number, width: number, height: number, color: string) {\n        this.canvasContext.strokeStyle = color;\n        this.canvasContext.strokeRect(x, y, width, height);\n    }\n\n    drawRoundedRect(\n        x: number, y: number, width: number, height: number, radius: number, color: string\n    ) {\n        this.canvasContext.beginPath();\n        this.canvasContext.strokeStyle = color;\n        this.canvasContext.moveTo(x + width - radius, y + height);\n        this.canvasContext.arcTo(x, y + height, x, y, radius);\n        this.canvasContext.arcTo(x, y, x + width, y, radius);\n        this.canvasContext.arcTo(x + width, y, x + width, y + height, radius);\n        this.canvasContext.arcTo(x + width, y + height, x, y + height, radius);\n        this.canvasContext.stroke();\n    }\n\n    drawLine(x1: number, y1: number, x2: number, y2: number, lineWidth: number, color: string) {\n        this.canvasContext.save();\n        this.canvasContext.beginPath();\n        this.canvasContext.lineWidth = lineWidth;\n        this.canvasContext.strokeStyle = color;\n        this.canvasContext.moveTo(x1, y1);\n        this.canvasContext.lineTo(x2, y2);\n        this.canvasContext.stroke();\n        this.canvasContext.restore();\n    }\n\n    drawDashedLine(x1: number, y1: number, x2: number, y2: number, lineWidth: number, color: string, dashParams: number[]) {\n        this.canvasContext.setLineDash(dashParams);\n        this.drawLine(x1, y1, x2, y2, lineWidth, color);\n        this.canvasContext.setLineDash([]);\n    }\n\n    drawFilledCircle(centerX: number, centerY: number, radius: number, color: string) {\n        this.canvasContext.beginPath();\n        this.canvasContext.fillStyle = color;\n        this.canvasContext.arc(centerX, centerY, radius, 0, 2 * Math.PI, true);\n        this.canvasContext.fill();\n    }\n\n    writeText(text: string, x: number, y: number, fontSize: number, color: string) {\n        this.canvasContext.fillStyle = color;\n        this.canvasContext.fillText(text, x, y);\n    }\n\n    translate(x: number, y: number) {\n        this.canvasContext.translate(x, y);\n    }\n\n    rotate(angle: number) {\n        this.canvasContext.rotate(angle);\n    }\n\n    pushState() {\n        this.canvasContext.save();\n    }\n\n    popState() {\n        this.canvasContext.restore();\n    }\n}\n\n\n// Mouse handler\n// let mouseX, mouseY;\n// canvas-container.addEventListener('mousemove', function (event) {\n//         let rect = canvas-container.getBoundingClientRect();\n//         let root = document.documentElement;\n\n//         mouseX = event.clientX - rect.left - root.scrollLeft;\n//         mouseY = event.clientY - rect.top - root.scrollTop;\n//     });\n"],"sourceRoot":""}